clear all
clf
s = struct();

% ---------------  CHANGE THESE  --------------------

% get your values of camber
camber = [-1.4, -3.0, -2.4, -2.7];
times = [67.400, 67.261, 67.246, 67.237];

% number of consecutive values that are averaged
% basically number of ms (miliseconds)
no_sampl = 200;

% get your path to the folder where the runs are saved
folder = 'D:\UGRacing\UGR EV23\VD\Side challenge 1';

% ----------------------------------------------------


%// Get all MAT files in directory
f = dir(fullfile(folder, '*.mat'));


%// For each MAT file...
for idx = 1 : 2 : numel(f)

    %// Get absolute path to MAT file - i.e. folder/file.mat
    run = f(idx).name(1:end-6);   %get the name of the run

    % load data for right and left side
    for side = 1:2
        
        name = fullfile(folder, f(idx).name);
        load(name);

        if side == 1

        %getting data into structure
            s.(['TSA_FL_Time_' run]) = Tire_Slip_Angle_FL.Time;
            s.(['TSA_FL_Value_' run]) = Tire_Slip_Angle_FL.Value;
        
            s.(['TSA_RL_Time_' run]) = Tire_Slip_Angle_RL.Time;
            s.(['TSA_RL_Value_' run]) = Tire_Slip_Angle_RL.Value;

        else 
    
        %getting data into structure
            s.(['TSA_FR_Time_' run]) = Tire_Slip_Angle_RL.Time;
            s.(['TSA_FR_Value_' run]) = Tire_Slip_Angle_RL.Value;
        
            s.(['TSA_RR_Time_' run]) = Tire_Slip_Angle_RL.Time;
            s.(['TSA_RR_Value_' run]) = Tire_Slip_Angle_RL.Value;
        end
    end

    % getting the lap started at 0
        s.(['TSA_FL_Time_' run]) = s.(['TSA_FL_Time_' run]) - s.(['TSA_FL_Time_' run])(1,1);
        s.(['TSA_RL_Time_' run]) = s.(['TSA_RL_Time_' run]) - s.(['TSA_RL_Time_' run])(1,1);
        s.(['TSA_FR_Time_' run]) = s.(['TSA_FR_Time_' run]) - s.(['TSA_FR_Time_' run])(1,1);
        s.(['TSA_RR_Time_' run]) = s.(['TSA_RR_Time_' run]) - s.(['TSA_RR_Time_' run])(1,1);

    
    % stitching the values together
        s.(['AVE_TSA_F_' run]) = (s.(['TSA_FL_Value_' run]) + s.(['TSA_FR_Value_' run])) ./2;
        s.(['AVE_TSA_R_' run]) = (s.(['TSA_RL_Value_' run]) + s.(['TSA_RR_Value_' run])) ./2;
    
    % Difference in angle, F- R
        s.(['DIFF_TSA_' run]) = s.(['AVE_TSA_F_' run]) - s.(['AVE_TSA_R_' run]);

        
% reshape to average for N continuous samples
% deletes the last k values so that there is no remainder after
% concatenation

    % get TSA data 
        to_delete = mod(int64(length(s.(['DIFF_TSA_' run]))), no_sampl);
        new_size = int64(length(s.(['DIFF_TSA_' run]))) - to_delete;

        s.(['DIFF_TSA_' run]) = mean(reshape(s.(['DIFF_TSA_' run])(1:new_size), no_sampl, []));

   
    % get time in order
        to_delete_time = mod(int64(length(s.(['TSA_FL_Time_' run]))), no_sampl);
        new_size = int64(length(s.(['TSA_FL_Time_' run]))) - to_delete;

        s.(['TSA_FL_Time_' run]) = mean(reshape(s.(['TSA_FL_Time_' run])(1:new_size), no_sampl, []));


    %create graph
        plot(s.(['TSA_FL_Time_' run]), s.(['DIFF_TSA_' run]))
        hold on

end

% pretty up the figure
grid on
xlabel('Time, [s]','FontName', 'Serif');
ylabel('Difference in ave slip, [deg]', 'FontName', 'Serif')
ax = gca;
ax.FontSize = 16;
ax.FontName = 'Serif';
ax.LineWidth = 1.25;


legend_strings = 'Camber: ' + string(camber) + '; Laptime:' + string(times);
legend(legend_strings)
hold off
