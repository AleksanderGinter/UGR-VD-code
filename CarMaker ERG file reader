import cmerg
import pandas as pd
import numpy as np
from Pandas import script_text
import matplotlib.pyplot as plt
from scipy.spatial import ConvexHull

log1 = 'D:/UGRacing/UGR EV23/VD/CM data/20230622/180935.erg'
log1_text_file = 'D:/UGRacing/UGR EV23/VD/CM data/20230622/data.txt'


data_collected = {}

# for t in log1.signals:
#     print(t)


# # print(log1.get('lapTime'))
# #
# time = log1.get('Time')
# time_lap = time.samples
#
# car_speed = log1.get('Car.Con.v')
# distance = log1.get('Car.Distance')
#
# car_dist = np.array(distance.samples)
# #
# t = np.array(car_speed.timestamps)
# spd = np.array(car_speed.samples)
#
# data_df_no_aero = {'Distance': car_dist, 'Lap0': time_lap}


def get_dataframe(link_data, value, laptimes):

    # todo consider dropping lap 0 column at the end
    """
    gets data from a linked CM file and return a dataframe with columns sorted as laps w.r.t distance
        function writes data as dataframes to the 'data_collected' dictionary, with keys as the name of the text file
        for the text file and text file name + value for the ERG file

    :param link_data: link to the ERG carmaker file
    :param value: value that wants to be researched, MUST be in signals
    :param laptimes: link to the text file with lap distances and times

    :return: dataframe with ERG data
    """

    # get data from CM ERG file
    log = cmerg.ERG(link_data)

    if value not in log.signals:
        raise ValueError("Value prompted not in ERG signals list")

    dist = np.array(log.get('Car.Distance').samples)
    value_data = np.array(log.get(str(value)).samples)

    # get data to FD, average over a meter, drop duplicates
    df = pd.DataFrame({'Distance': dist, 'Lap0': value_data})
    df['Distance'] = df['Distance'].astype(int)
    df.set_index('Distance', inplace=True)
    df['Lap0'] = df.groupby('Distance')['Lap0'].mean()
    df.drop_duplicates(inplace=True)

    # read text file data
    data_text = script_text.get_data(laptimes)

    # split columns
    for i in range(0, len(data_text)):
        dist_start_lap = int(data_text[0:i]['Dist'].sum())
        dist_end_lap = int(data_text[0:i + 1]['Dist'].sum())
        df['Lap{}'.format(i + 1)] = df.iloc[dist_start_lap:dist_end_lap]['Lap0'].reset_index(drop=True) \
                                    - df['Lap0'][dist_start_lap]

    df['Mean'] = df.iloc[:, 2:].mean(axis=1)
    df['Median'] = df.iloc[:, 2:].median(axis=1)
    df['Sigma'] = df.iloc[:, 2:].std(axis=1)

    df = df.truncate(after=int(max(data_text['Dist'])))

    key_data = (laptimes.split('/')[len(laptimes.split('/')) - 1][:-4]) + str(value)
    key_text = (laptimes.split('/')[len(laptimes.split('/')) - 1][:-4])

    data_collected[key_data] = df
    data_collected[key_text] = data_text

    return df


get_dataframe(log1, 'Time', log1_text_file)
