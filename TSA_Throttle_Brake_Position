clear all
clf
s = struct();

% ---------------  CHANGE THESE  --------------------

% number of consecutive values that are averaged
% basically number of ms (miliseconds)
no_sampl = 100;

% get your path to the folder where the runs are saved
folder = 'D:\UGRacing\UGR EV23\VD\Challenge2\TSA_brake';

manual_legend = {'Final setup', 'Stock setup'};
% ----------------------------------------------------


% get speed range correct


%// Get all MAT files in directory
f = dir(fullfile(folder, '*.mat'));
runs = {};
times = {};
balance = {};


%// For each MAT file...
for idx = 1 : numel(f)
% for idx = 1:1

    %// Get absolute path to MAT file - i.e. folder/file.mat
    run = f(idx).name(1:end-4);   %get the name of the run
    runs{length(runs) + 1} = run;

    name = fullfile(folder, f(idx).name);
    load(name);

    %getting data into structure
        s.(['Time_' run]) = Tire_Slip_Angle_FL.Time;
        s.(['TSA_FL_Value_' run]) = abs(Tire_Slip_Angle_FL.Value);
        s.(['TSA_RL_Value_' run]) = abs(Tire_Slip_Angle_RR.Value);
        s.(['TSA_FR_Value_' run]) = abs(Tire_Slip_Angle_RL.Value);
        s.(['TSA_RR_Value_' run]) = abs(Tire_Slip_Angle_RR.Value);

        s.(['Lap_Dist_' run]) = Corr_Dist.Value;
        s.(['Throttle_' run]) = Throttle_Pos.Value - Brake_Pos.Value; 



    % getting the lap started at 0
        s.(['Time_' run]) = s.(['Time_' run]) - s.(['Time_' run])(1,1);
        s.(['Lap_Dist_' run]) = s.(['Lap_Dist_' run]) - s.(['Lap_Dist_' run])(1,1);
        times{length(times) + 1} = s.(['Time_' run])(1, end);

    % stitching the values together
        s.(['AVE_TSA_F_' run]) = (s.(['TSA_FL_Value_' run]) + s.(['TSA_FR_Value_' run])) ./2;
        s.(['AVE_TSA_R_' run]) = (s.(['TSA_RL_Value_' run]) + s.(['TSA_RR_Value_' run])) ./2;
    
    % Difference in angle, F- R
        s.(['DIFF_TSA_' run]) = s.(['AVE_TSA_F_' run]) - s.(['AVE_TSA_R_' run]);

        balance{idx} = round(sum(s.(['DIFF_TSA_' run]))/length(s.(['DIFF_TSA_' run])), 3);

        
% reshape to average for N continuous samples
% deletes the last k values so that there is no remainder after
% concatenation

    % get TSA data 
        to_delete = mod(int64(length(s.(['DIFF_TSA_' run]))), no_sampl);
        new_size = int64(length(s.(['DIFF_TSA_' run]))) - to_delete;

        s.(['DIFF_TSA_' run]) = smooth(mean(reshape(s.(['DIFF_TSA_' run])(1:new_size), no_sampl, [])));

       % get lap distnace and speed in order
        s.(['Lap_Dist_' run]) = mean(reshape(s.(['Lap_Dist_' run])(1:new_size), no_sampl, []));
        s.(['Throttle_' run]) = round(mean(reshape(s.(['Throttle_' run])(1:new_size), no_sampl, [])));

    %create graph
        markers = ['o', 'x', '^', '<', '+'];

        patch(s.(['Lap_Dist_' run]), s.(['DIFF_TSA_' run]),s.(['Throttle_' run]), 'FaceColor', 'none', 'EdgeColor', 'interp', 'Marker', markers(idx), 'LineWidth', 1.5)
%         scatter(s.(['TSA_FL_Time_' run]), s.(['DIFF_TSA_' run]),18, s.(['speed_' run]), markers(idx));
%         plot(s.(['Lap_Dist_' run]), s.(['DIFF_TSA_' run]), 'LineWidth', 0.75)

        % Create green-to-red colormap
        cMap = interp1([0;1],[1 0 0; 0 1 0],linspace(0,1,256));
        colormap(cMap)
        hold on

end

% pretty up the figure
grid on
x = xlabel('Corrected Lap Distance, [m]','FontName', 'Serif');
set(x, 'FontSize', 24)
y = ylabel('Difference in average slip, F-R, [deg]', 'FontName', 'Serif');
set(y, 'FontSize', 24)

% ------------------------------ CHANGE AXES -----------------------------
axis([400 1500 -3 5])
%-------------------------------------------------------------------------

ax = gca;
ax.FontSize = 16;
ax.FontName = 'Serif';
ax.LineWidth = 1.25;
h = colorbar;
ylabel(h, 'Throttle/Brake position, %', 'FontSize', 20)

legend_strings = string(manual_legend) + '; Laptime: ' + string(times);
for i = 1:idx
    L(i) = plot(nan, nan, ['b' markers(i)]);
end
leg = legend(L, legend_strings);
set(leg, 'Interpreter', 'none', 'FontSize', 16);
hold off
